<blocks app="Snap! 6, https://snap.berkeley.edu" version="1"><block-definition s="play note rhythm %&apos;notes&apos; beats %&apos;beats&apos; note default durration %&apos;nd&apos; leave blank for rest" type="command" category="sound"><header></header><code></code><translations></translations><inputs><input type="%mult%mult%note"></input><input type="%n">0.5</input><input type="%n">0.2</input></inputs><script><block s="doIf"><block var="record?"/><script><block s="doWarp"><script><block s="doDeclareVariables"><list><l>a</l></list></block><block s="doSetVar"><l>a</l><block s="reportNewList"><list></list></block></block><block s="doForEach"><l>item</l><block var="notes"/><script><block s="doIf"><block s="reportGreaterThan"><block s="reportListAttribute"><l><option>length</option></l><block var="item"/></block><l>0</l></block><script><block s="doAddToList"><block s="reportListItem"><l>1</l><block var="item"/></block><block var="a"/></block></script></block></script></block><block s="doAddToList"><custom-block s="create rhythm %mult%n %br beats %n %br note default durration %n leave blank for rest %br GPIO pin %n"><block var="a"/><block var="beats"/><block var="nd"/><l>19</l></custom-block><block var="scripts"/></block></script></block><block s="doForEach"><l>chord</l><block var="notes"/><script><block s="doAddToList"><block var="chord"/><block var="recorded notes"/></block><block s="doAddToList"><block var="nd"/><block var="recorded beats"/></block><block s="doAddToList"><block var="beats"/><block var="recorded full beats"/></block></script></block></script></block><block s="doForEach"><l>item</l><block var="notes"/><script><custom-block s="play notes %mult%note for %n beats: note duration %n"><block var="item"/><block var="beats"/><block var="nd"/></custom-block></script></block></script></block-definition><block-definition s="create rhythm %&apos;notes&apos; $nl beats %&apos;beats&apos; $nl note default durration %&apos;nd&apos; leave blank for rest $nl GPIO pin %&apos;#&apos;" type="reporter" category="sound"><header></header><code></code><translations></translations><inputs><input type="%mult%n"><options>ยง_pianoKeyboardMenu</options></input><input type="%n"></input><input type="%n"></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doDeclareVariables"><list><l>script</l><l>start hz</l><l>stop hz</l></list></block><block s="doSetVar"><l>start hz</l><custom-block s="%s put into slot %n of %cmdRing"><block var="#"/><l>1</l><block s="reifyReporter"><script><custom-block s="GPIO %n stert frequency %n"><l></l><l></l></custom-block></script><list></list></block></custom-block></block><block s="doSetVar"><l>stop hz</l><custom-block s="%s put into slot %n of %cmdRing"><block var="#"/><l>1</l><block s="reifyReporter"><script><custom-block s="GPIO %n stop frequency"><l></l></custom-block></script><list></list></block></custom-block></block><block s="doSetVar"><l>script</l><block s="reifyScript"><script></script><list></list></block></block><block s="doForEach"><l>item</l><block var="notes"/><script><block s="doSetVar"><l>script</l><custom-block s="%cmdRing put after %cmdRing"><block s="reportIfElse"><block s="reportEquals"><block var="item"/><l>0</l></block><custom-block s="%s put into slot %n of %cmdRing"><custom-block s="%n % of %n"><custom-block s="percentage of %n in %n"><block var="beats"/><l>1</l></custom-block><block s="reportQuotient"><block s="reportQuotient"><l>60000</l><block s="getTempo"></block></block><l>1000</l></block></custom-block><l>1</l><block s="reifyScript"><script><block s="doWait"><l></l></block></script><list></list></block></custom-block><custom-block s="%cmdRing put before %cmdRing"><custom-block s="%cmdRing put before %cmdRing"><custom-block s="%cmdRing put before %cmdRing"><custom-block s="%s put into slot %n of %cmdRing"><custom-block s="hz from note %n"><block var="item"/></custom-block><l>2</l><block var="start hz"/></custom-block><custom-block s="%s put into slot %n of %cmdRing"><custom-block s="%n % of %n"><custom-block s="percentage of %n in %n"><block s="reportIfElse"><block s="reportGreaterThan"><block var="nd"/><block var="beats"/></block><block var="beats"/><block var="nd"/></block><l>1</l></custom-block><block s="reportQuotient"><block s="reportQuotient"><l>60000</l><block s="getTempo"></block></block><l>1000</l></block></custom-block><l>1</l><block s="reifyScript"><script><block s="doWait"><l></l></block></script><list></list></block></custom-block></custom-block><block var="stop hz"/></custom-block><custom-block s="%s put into slot %n of %cmdRing"><custom-block s="%n % of %n"><custom-block s="percentage of %n in %n"><block s="reportIfElse"><block s="reportGreaterThan"><block var="nd"/><block var="beats"/></block><block var="beats"/><block s="reportDifference"><block var="beats"/><block var="nd"/></block></block><l>1</l></custom-block><block s="reportQuotient"><block s="reportQuotient"><l>60000</l><block s="getTempo"></block></block><l>1000</l></block></custom-block><l>1</l><block s="reifyScript"><script><block s="doWait"><l></l></block></script><list></list></block></custom-block></custom-block></block><block var="script"/></custom-block></block></script></block><block s="doReport"><block var="script"/></block></script></block></script><scripts><script x="473" y="106.16666666666669"><custom-block s="%s put into slot %n of %cmdRing"><l></l><l>1</l><block var="beats block"/></custom-block></script><script x="706.244140625" y="356.2"><block var="beats"/></script><script x="248" y="185.16666666666669"><custom-block s="%s put into slot %n of %cmdRing"><block var="beats"/><l>1</l><block s="reifyReporter"><script></script><list></list></block></custom-block></script><script x="488" y="173.19999999999993"><custom-block s="%n Hz for %n secs at %n Hz sample rate"><l></l><l>1</l><l>48000</l></custom-block></script></scripts></block-definition><block-definition s="%&apos;thing&apos; put into slot %&apos;slot&apos; of %&apos;target&apos;" type="reporter" category="operators"><comment x="0" y="0" w="90" collapsed="false">Puts a block/value inside a specified input of another block.</comment><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%n"></input><input type="%cmdRing"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>thing</l><l>slot</l><l>target</l></list><l>//if empty&#xD;if (!(target.expression instanceof BlockMorph)) return thing;&#xD;if (!(thing.expression instanceof BlockMorph || thing.expression instanceof ReporterBlockMorph || typeof(thing) == "string" || typeof(thing) == "number" || typeof(thing) == "boolean")) return target;&#xD;&#xD;var type = typeof(thing);&#xD;var slotNum = 1;&#xD;//console.log();&#xD;&#xD;var outExpr = target.expression.fullCopy();&#xD;var outCtx = new Context(undefined, outExpr);&#xD;//outCtx.inputs = thing.inputs || [];&#xD;&#xD;var block;&#xD;&#xD;if (thing.expression instanceof Morph) block = thing.expression.fullCopy();&#xD;&#xD;for (let i in outExpr.children) {&#xD; let child = outExpr.children[i];&#xD;&#xD; if (type == "boolean") {&#xD;  if (child instanceof BooleanSlotMorph) {&#xD;   child.value = thing;&#xD;   return outCtx;&#xD;  }&#xD; } else&#xD; if (child instanceof InputSlotMorph || child instanceof RingMorph || child instanceof CSlotMorph || child instanceof ArgMorph) {&#xD;  if (slotNum == slot) {&#xD;   //console.log(child);&#xD;&#xD;   if (type == "string" || type == "number") {&#xD;    if (!(child.children[0] instanceof InputSlotStringMorph)) return target;&#xD;&#xD;    child.setContents(thing);&#xD;    delete child.bindingID;&#xD;    return outCtx;     &#xD;   }&#xD;&#xD;   if (child instanceof RingMorph) {&#xD;    child.embed(block, thing.inputs);&#xD;&#xD;    return outCtx;&#xD;   } if (child instanceof CSlotMorph) {&#xD;    let input = child;&#xD;&#xD;    //clear children&#xD;    while (input.children[0] !== undefined) input.removeChild(input.children[0]);&#xD;&#xD;    input.children.push(block);&#xD;    block.parent = input;&#xD;    input.fixLayout(); &#xD;   } else {&#xD;    if (child instanceof InputSlotMorph) {&#xD;     thing.expression.isNumeric = child.isNumeric;&#xD;     thing.expression.fixLayout();&#xD;    }&#xD;&#xD;    outExpr.children.splice(i, 1, block);&#xD;    block.parent = outExpr;&#xD;    outExpr.fixLayout();&#xD;   }&#xD;&#xD;   //target.expression.fixLayout();&#xD;   //outCtx.inputs = thing.inputs; &#xD;   return outCtx;&#xD;  }&#xD;&#xD;  slotNum++;&#xD; }&#xD;}&#xD;&#xD;return target; </l></block><list><block var="thing"/><block var="slot"/><block var="target"/></list></block></block></script></block-definition><block-definition s="%&apos;frequency&apos; Hz for %&apos;duration&apos; secs at %&apos;sample rate&apos; Hz sample rate" type="reporter" category="sound"><comment x="0" y="0" w="205" collapsed="false">generate a list of samples representing a sine wave at the given frequency, duration and sample rate</comment><header></header><code></code><translations>pt:as amostras de som com _ Hz de _ s amostrado a _ Hz&#xD;</translations><inputs><input type="%n">440<options>a 55=55&#xD;a 110=110&#xD;a 220=220&#xD;a 440=440&#xD;a 880=880&#xD;a 1760=1760&#xD;a 3520=3520</options></input><input type="%n">1</input><input type="%n">44100<options>22.05 kHz=22050&#xD;44.1 kHz=44100&#xD;88.2 kHz=88200&#xD;96 kHz=96000</options></input></inputs><script><block s="doDeclareVariables"><list><l>output</l><l>sample period</l><l>duration in samples</l><l>time</l></list></block><block s="doSetVar"><l>sample period</l><block s="reportQuotient"><l>1</l><block var="sample rate"/></block></block><block s="doSetVar"><l>duration in samples</l><block s="reportMonadic"><l><option>ceiling</option></l><block s="reportProduct"><block var="duration"/><block var="sample rate"/></block></block></block><block s="doSetVar"><l>time</l><l>0</l></block><block s="doSetVar"><l>output</l><block s="reportNewList"><list></list></block></block><block s="doWarp"><script><block s="doRepeat"><block var="duration in samples"/><script><block s="doAddToList"><block s="reportMonadic"><l><option>sin</option></l><custom-block s="degrees %n"><block s="reportProduct"><l>2</l><block s="reportProduct"><custom-block s="PI"></custom-block><block s="reportProduct"><block var="frequency"/><block var="time"/></block></block></block></custom-block></block><block var="output"/></block><block s="doChangeVar"><l>time</l><block var="sample period"/></block></script></block></script></block><block s="doReport"><block var="output"/></block></script></block-definition><block-definition s="PI" type="reporter" category="operators"><header></header><code></code><translations>pt:ฯ&#xD;</translations><inputs></inputs><script><block s="doReport"><l>3.141592653589793</l></block></script></block-definition><block-definition s="degrees %&apos;radians&apos;" type="reporter" category="operators"><header></header><code></code><translations>pt:_ radianos em graus&#xD;</translations><inputs><input type="%n">0.5</input></inputs><script><block s="doReport"><block s="reportQuotient"><block s="reportProduct"><block var="radians"/><l>180</l></block><custom-block s="PI"></custom-block></block></block></script></block-definition><block-definition s="GPIO %&apos;#&apos; stert frequency %&apos;hz&apos;" type="command" category="sound"><header></header><code>pwm_&lt;#1&gt;.start(50)&#xD;pwm_&lt;#1&gt;.ChangeFrequency(&lt;#2&gt;)</code><translations></translations><inputs><input type="%n"></input><input type="%n"></input></inputs><script><block s="playFreq"><block var="hz"/></block></script></block-definition><block-definition s="GPIO %&apos;#&apos; stop frequency" type="command" category="sound"><header></header><code>pwm_&lt;#1&gt;.stop()</code><translations></translations><inputs><input type="%n"></input></inputs><script><block s="stopFreq"></block></script></block-definition><block-definition s="percentage of %&apos;num&apos; in %&apos;total&apos;" type="reporter" category="operators"><header></header><code>((&lt;#1&gt; / &lt;#2&gt;) * 100)</code><translations></translations><inputs><input type="%n">10</input><input type="%n">20</input></inputs><script><block s="doReport"><block s="reportProduct"><block s="reportQuotient"><block var="num"/><block var="total"/></block><l>100</l></block></block></script></block-definition><block-definition s="%&apos;num&apos; % of %&apos;total&apos;" type="reporter" category="operators"><header></header><code>((&lt;#1&gt; * &lt;#2&gt;) / 100)</code><translations></translations><inputs><input type="%n">10</input><input type="%n">100</input></inputs><script><block s="doReport"><block s="reportQuotient"><block s="reportProduct"><block var="num"/><block var="total"/></block><l>100</l></block></block></script></block-definition><block-definition s="hz from note %&apos;note&apos;" type="reporter" category="sound"><header></header><code>(440 * (2 ** ((&lt;#1&gt; - 69) / 12)))</code><translations>pt:a frequรชncia da nota _&#xD;</translations><inputs><input type="%n">69</input></inputs><script><block s="doReport"><block s="reportProduct"><l>440</l><block s="reportPower"><l>2</l><block s="reportQuotient"><block s="reportDifference"><block var="note"/><l>69</l></block><l>12</l></block></block></block></block></script></block-definition><block-definition s="%&apos;child&apos; put before %&apos;script&apos;" type="reporter" category="operators"><comment x="0" y="0" w="90" collapsed="false">Puts the blocks in the first script at the beginning of the blocks in the second script.</comment><header></header><code></code><translations></translations><inputs><input type="%cmdRing"></input><input type="%cmdRing"></input></inputs><script><block s="doReport"><custom-block s="%cmdRing put after %cmdRing"><block var="script"/><block var="child"/></custom-block></block></script><scripts><script x="286.9951171875" y="138.83333333333331"><block s="evaluate"><block s="reportJSFunction"><list><l>child</l><l>script</l></list><l>//if empty&#xD;if (!(script.expression instanceof BlockMorph)) return child;&#xD;if (!(child.expression instanceof BlockMorph)) return script;&#xD;&#xD;//combine inputs&#xD;for (let v of script.inputs) {&#xD; if (child.inputs.indexOf(v) &lt; 0) {&#xD;  child.inputs.push(v);&#xD; }&#xD;}&#xD;&#xD;child.expression.add(script.expression);&#xD;child.expression.fixLayout();&#xD;return child;</l></block><list><block var="child"/><block var="script"/></list></block></script></scripts></block-definition><block-definition s="%&apos;child&apos; put after %&apos;script&apos;" type="reporter" category="operators"><comment x="0" y="0" w="90" collapsed="false">Puts the blocks in the first script at the end of the second script.</comment><header></header><code></code><translations></translations><inputs><input type="%cmdRing"></input><input type="%cmdRing"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>child</l><l>script</l></list><l>//if empty&#xD;if (!(script.expression instanceof BlockMorph)) return child;&#xD;if (!(child.expression instanceof BlockMorph)) return script;&#xD;&#xD;var tailBlock = script.expression.fullCopy();&#xD;var outCtx = new Context(undefined, tailBlock);&#xD;var lastChild = tailBlock.nextBlock();&#xD;&#xD;while (lastChild instanceof BlockMorph) {&#xD; tailBlock = lastChild;&#xD; lastChild = lastChild.nextBlock();&#xD;}&#xD;&#xD;tailBlock.add(child.expression.fullCopy());&#xD;tailBlock.fixLayout();&#xD;&#xD;//combine inputs&#xD;outCtx.inputs = script.inputs;&#xD;&#xD;for (let v of child.inputs) {&#xD; if (outCtx.inputs.indexOf(v) &lt; 0) {&#xD;  outCtx.inputs.push(v);&#xD; }&#xD;}&#xD;&#xD;return outCtx;</l></block><list><block var="child"/><block var="script"/></list></block></block></script></block-definition><block-definition s="play notes %&apos;notes&apos; for %&apos;beats&apos; beats: note duration %&apos;sd&apos;" type="command" category="sound"><header></header><code></code><translations></translations><inputs><input type="%mult%note">60</input><input type="%n">0.5</input><input type="%n">1</input></inputs><script><block s="doIf"><block s="reportListIsEmpty"><block var="notes"/></block><script><block s="doStopThis"><l><option>this block</option></l></block></script></block><block s="doIfElse"><block s="reportEquals"><block s="reportListItem"><l>1</l><block var="notes"/></block><l>0</l></block><script><block s="doIfElse"><block s="reportEquals"><block s="reportListAttribute"><l><option>length</option></l><block var="notes"/></block><l>1</l></block><script><block s="doRest"><block var="beats"/></block></script><script><block s="fork"><block s="reifyScript"><script><block s="doRest"><block var="beats"/></block></script><list></list></block><list></list></block></script></block></script><script><block s="doIfElse"><block s="reportEquals"><block s="reportListAttribute"><l><option>length</option></l><block var="notes"/></block><l>1</l></block><script><block s="doPlayNote"><block s="reportListItem"><l>1</l><block var="notes"/></block><block s="reportIfElse"><block s="reportGreaterThan"><block var="sd"/><block var="beats"/></block><block var="beats"/><block var="sd"/></block></block><block s="doRest"><block s="reportIfElse"><block s="reportGreaterThan"><block var="sd"/><block var="beats"/></block><block var="beats"/><block s="reportDifference"><block var="beats"/><block var="sd"/></block></block></block></script><script><block s="fork"><block s="reifyScript"><script><block s="doPlayNote"><block s="reportListItem"><l>1</l><block var="notes"/></block><block s="reportIfElse"><block s="reportGreaterThan"><block var="sd"/><block var="beats"/></block><block var="beats"/><block var="sd"/></block></block><block s="doRest"><block s="reportIfElse"><block s="reportGreaterThan"><block var="sd"/><block var="beats"/></block><block var="beats"/><block s="reportDifference"><block var="beats"/><block var="sd"/></block></block></block></script><list></list></block><list></list></block></script></block></script></block><custom-block s="play notes %mult%note for %n beats: note duration %n"><block s="reportCDR"><block var="notes"/></block><block var="beats"/><block var="sd"/></custom-block></script></block-definition></blocks>