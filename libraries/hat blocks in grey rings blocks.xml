<blocks app="Snap! 6, https://snap.berkeley.edu" version="1"><block-definition s="when $flag-1-0-200-0-1 clicked" type="reporter" category="control"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="reifyScript"><script><block s="receiveGo"></block></script><list></list></block></block></script></block-definition><block-definition s="put %&apos;thing&apos; into slot %&apos;slot&apos; of %&apos;target&apos;" type="reporter" category="operators"><comment x="0" y="0" w="90" collapsed="false">Puts a block/value inside a specified input of another block.</comment><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%n"></input><input type="%cmdRing"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>thing</l><l>slot</l><l>target</l></list><l>//if empty&#xD;if (!(target.expression instanceof BlockMorph)) return thing;&#xD;if (!(thing.expression instanceof BlockMorph || thing.expression instanceof ReporterBlockMorph || typeof(thing) == "string" || typeof(thing) == "boolean")) return target;&#xD;&#xD;var type = typeof(thing);&#xD;var slotNum = 1;&#xD;//console.log();&#xD;for (let i in target.expression.children) {&#xD; let child = target.expression.children[i];&#xD;&#xD; if (type == "boolean") {&#xD;  if (child instanceof BooleanSlotMorph) {&#xD;   child.value = thing;&#xD;   return target;&#xD;  }&#xD; } else&#xD; if (child instanceof InputSlotMorph || child instanceof RingMorph || child instanceof CSlotMorph || child instanceof ArgMorph) {&#xD;  if (slotNum == slot) {&#xD;   console.log(child);&#xD;&#xD;   if (type == "string") {&#xD;    if (!(child.children[0] instanceof InputSlotStringMorph)) return target;&#xD;&#xD;    child.children[0].text = thing;&#xD;    child.children[0].fixLayout();&#xD;&#xD;    return target;     &#xD;   }&#xD;&#xD;   if (child instanceof RingMorph || child instanceof CSlotMorph) {&#xD;    let input = (child instanceof RingMorph) ? child.children[0] : child;&#xD;&#xD;    //clear children&#xD;    while (input.children[0] !== undefined) input.removeChild(input.children[0]);&#xD;&#xD;    input.children.push(thing.expression);&#xD;    thing.expression.parent = input;&#xD;    input.fixLayout(); &#xD;   } else {&#xD;    if (child instanceof InputSlotMorph) {&#xD;     thing.expression.isNumeric = child.isNumeric;&#xD;     thing.expression.fixLayout();&#xD;    }&#xD;&#xD;    target.expression.children.splice(i, 1, thing.expression);&#xD;    thing.expression.parent = target.expression;&#xD;    target.expression.fixLayout();&#xD;   }&#xD;&#xD;   //target.expression.fixLayout(); &#xD;   return target;&#xD;  }&#xD;&#xD;  slotNum++;&#xD; }&#xD;}&#xD;&#xD;return target; </l></block><list><block var="thing"/><block var="slot"/><block var="target"/></list></block></block></script></block-definition><block-definition s="when I am %&apos;condition&apos;" type="reporter" category="control"><header></header><code></code><translations></translations><inputs><input type="%s">clicked<options>clicked&#xD;pressed&#xD;dropped&#xD;mouse-entered&#xD;mouse-departed&#xD;scrolled-up&#xD;scrolled-down&#xD;stopped</options></input></inputs><script><block s="doReport"><custom-block s="put %s into slot %n of %cmdRing"><block var="condition"/><l>1</l><block s="reifyScript"><script><block s="receiveInteraction"><l><option>clicked</option></l></block></script><list></list></block></custom-block></block></script></block-definition><block-definition s="when %&apos;condition&apos;" type="reporter" category="control"><header></header><code></code><translations></translations><inputs><input type="%boolUE"></input></inputs><script><block s="doReport"><custom-block s="put %s into slot %n of %cmdRing"><block s="reportIfElse"><custom-block s="text %txt contains %txt"><block s="reportJoinWords"><list><block var="condition"/></list></block><l>BooleanSlotMorph</l></custom-block><block s="evaluate"><block var="condition"/><list></list></block><block var="condition"/></block><l>1</l><block s="reifyScript"><script><block s="receiveCondition"><l/></block></script><list></list></block></custom-block></block></script></block-definition><block-definition s="when I start as a clone" type="reporter" category="control"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="reifyScript"><script><block s="receiveOnClone"></block></script><list></list></block></block></script></block-definition><block-definition s="when I receive %&apos;message&apos;" type="reporter" category="control"><header></header><code></code><translations></translations><inputs><input type="%s"><options>ยง_messagesMenu</options></input></inputs><script><block s="doReport"><custom-block s="put %s into slot %n of %cmdRing"><block var="message"/><l>1</l><block s="reifyScript"><script><block s="receiveMessage"><l></l></block></script><list></list></block></custom-block></block></script></block-definition><block-definition s="when %&apos;key&apos; key pressed" type="reporter" category="control"><header></header><code></code><translations></translations><inputs><input type="%key">space<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;any key&#xD;up arrow&#xD;down arrow&#xD;left arrow&#xD;right arrow&#xD;space&#xD;+&#xD;-&#xD;a&#xD;b&#xD;c&#xD;d&#xD;e&#xD;f&#xD;g&#xD;h&#xD;i&#xD;j&#xD;k&#xD;l&#xD;m&#xD;n&#xD;o&#xD;p&#xD;q&#xD;r&#xD;s&#xD;t&#xD;u&#xD;v&#xD;w&#xD;x&#xD;y&#xD;z</options></input></inputs><script><block s="doReport"><custom-block s="put %s into slot %n of %cmdRing"><block var="key"/><l>1</l><block s="reifyScript"><script><block s="receiveKey"><l><option>space</option></l></block></script><list></list></block></custom-block></block></script></block-definition><block-definition s="text %&apos;string&apos; contains %&apos;marker&apos;" type="predicate" category="operators"><comment x="0" y="0" w="218" collapsed="false">Reports True if the first input string contains the second input string, otherwise false.&#xD;&#xD;Comparison is case-independent by default; use USE CASE-INDEPENDENT COMPARISONS to change that.</comment><header></header><code></code><translations>pt:o texto de _ antes de _&#xD;</translations><inputs><input type="%txt"></input><input type="%txt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>string</l><l>marker</l></list><l>var world=this.parentThatIsA(IDE_Morph);&#xD;if (!("stringLibCaseIndependentComparison" in world)) {&#xD;    world["stringLibCaseIndependentComparison"] = true;&#xD;};&#xD;if (world["stringLibCaseIndependentComparison"]) {&#xD;    var index=string.toLocaleLowerCase().indexOf(marker.toLocaleLowerCase());&#xD;    return !(index&lt;0);&#xD;} else {&#xD;    var index=string.indexOf(marker);&#xD;    return !(index&lt;0);&#xD;}</l></block><list><block var="string"/><block var="marker"/></list></block></block></script></block-definition></blocks>